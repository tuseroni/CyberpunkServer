//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CyberpunkServer.Models.DTO
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class PlayerComputerData: iAddPrograms
	{
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public PlayerComputerData()
        {
            this.PlayerComputerImprovements = new List<PlayerComputerImprovementsData>();
            this.PlayerComputerOptions = new List<PlayerComputerOptionsData>();
            this.PlayerComputerPrograms = new List<PlayerComputerProgramsData>();
        }
    
        public int id { get; set; }
        public string name { get; set; }
        public Nullable<int> ComputerID { get; set; }
        public Nullable<int> PlayerID { get; set; }
        public string description { get; set; }
        public Dictionary<string, int> Improvements { get; set; }
        public virtual ComputerData Computer { get; set; }
        public bool isCyberEnabled { get; set; }

        public int TotalMemory
        {
            get
            {
                var totalMemory = Computer?.Memory ?? 0;
                if (Improvements.ContainsKey("Memory"))
                {
                    totalMemory += Improvements["Memory"];
                }
                return totalMemory;
            }
        }
        public int TotalSpeed
        {
            get
            {
                var totalSpeed = Computer?.Speed ?? 0;
                if (Improvements.ContainsKey("Speed"))
                {
                    totalSpeed += Improvements["Speed"];
                }
                return totalSpeed;
            }
            set
            {

            }
        }
        public int TotalChipslots
        {
            get
            {
                var totalSlots = Computer?.Chipslots ?? 0;
                if (Improvements.ContainsKey("Chipslots"))
                {
                    totalSlots += Improvements["Chipslots"];
                }
                return totalSlots;
            }
        }
        public int TotalSlots
        {
            get
            {
                var totalSlots = Computer?.NumSlots ?? 0;
                if (Improvements.ContainsKey("NumSlots"))
                {
                    totalSlots += Improvements["NumSlots"];
                }
                return totalSlots;
            }
        }
        public double TotalBattery
        {
            get
            {
                var totalSlots = Computer?.BateryHours ?? 0;
                if (Improvements.ContainsKey("BateryHours"))
                {
                    totalSlots += Improvements["BateryHours"];
                }
                return totalSlots;
            }
        }
        public int TotalMemoryCost
        {
            get
            {
                return Convert.ToInt32(PlayerComputerPrograms.Sum(x => x.MU)) + PlayerComputerOptions.Sum(x=>x.ComputerPeripherals.MU)??0;
            }
        }
		public bool addProgram(ProgramData program)
		{
			var newprog = new PlayerComputerProgramsData
			{
				Program = program,
				ProgramID = program.id,
				Strength = program.Strength,
				Rezzed = false,
				PlayerComputerID = id
			};
			PlayerComputerPrograms.Add(newprog);
			return true;
		}
		public bool addProgram(List<ProgramData> programs)
		{
			foreach (var program in programs)
			{
				addProgram(program);
			}
			return true;
		}
		Guid _uuid = Guid.NewGuid();
		public string UUID
		{
			get
			{
				return _uuid.ToString();
			}
		}
		public virtual List<PlayerComputerImprovementsData> PlayerComputerImprovements { get; set; }
        public virtual List<PlayerComputerOptionsData> PlayerComputerOptions { get; set; }
        public virtual List<PlayerComputerProgramsData> PlayerComputerPrograms { get; set; }
        
    }
}
