@page "/Subgrids/{SubgridID:int}"
@using CyberpunkServer.Models.DTO;
@using Cyberpunk_Server_Blazor.Data;
@using Microsoft.EntityFrameworkCore;
@using Cyberpunk_Server_Blazor.Pages.Electronics
@inject IDbContextFactory<CyberpunkServer.Models.CyberpunkEntities> db
@inject NavigationManager MyNavigationManager
@inherits ComponentBase


	<style>
	rect.gridTile {
		fill: transparent;
		border-style: solid;
		border-width: 1px;
		stroke: black;
	}

		rect.gridTile:hover {
			fill: #add8e6a1;
		}

	div#gridHolder {
		/* height: 60vh; */
		background-color: white;
		width: 100%;
	}

	div#Elements {
		display: grid;
		grid-template-columns: repeat(19, 1fr);
	}

	#Elements svg {
		height: 100%;
		width: 100%;
	}

	.GridSVG {
		height: 100%;
		width: 100%;
	}

	.NetOBJ + rect {
		fill: transparent;
	}

		.NetOBJ + rect.selected, .NetOBJ + rect:hover {
			stroke: black;
			rx: 5;
		}

		.NetOBJ + rect.selected {
			fill: #d3d3d3a1;
		}

		.NetOBJ + rect:hover {
			fill: #add8e6a1;
		}


	.NetOBJ {
		margin: 2px;
		display: block;
	}

	.dataPair {
		display: grid;
		grid-template-columns: 2fr minmax(0px, 1fr);
	}

	.progList .dataPair {
		grid-template-columns: 19px 1fr;
	}

	.progList select {
		width: 100%;
	}
</style>

<ul id="messagesList">
	@foreach (var message in messages)
	{
		<li>@message</li>
	}
</ul>
@if (SelectedItem != null)
{
	@if (SelectedItem is PlayerData)
	{
		<h3>@(((PlayerData)SelectedItem).Handle) is Trying to Jack In, Please Click Jack In Point</h3>
		<button @onclick="cancelJackIn">Cancel</button>
	}
	else if (SelectedItem is FortressProgramsData)
	{
		<h3>Click on Tile to Place Item</h3>
		<select @bind=SelectedProgramIndex>
			@for(var i=0; i< ProgramList.Count; i++)
			{
				<option value="@i">@ProgramList[i].name</option>
			}
		</select>
		<button @onclick="cancelPlace">Cancel</button>
	}
	else
	{
		<h3>Click on Tile to Place Item</h3>
		<button @onclick="cancelPlace">Cancel</button>
	}
}
@if(FortressHasBeenAlerted)
{
	<h2>Fortress Has been Alerted</h2>
	<h3>@AlertText</h3>
}
@if (grid == null)
{
	<h3>Loading...</h3>
}
else
{
	<div style="display: grid; grid-template-columns: 30% 1fr; grid-gap: 10px;">
		<div style="border: solid 1px;border-radius: 10px;">
			<div class="fortressInfo">
				<div class="dataPair"><label>Name</label><input type="text" @bind=Fortress.Name></div>
				<div class="dataPair"><label>Int</label><label>@Fortress.Int</label></div>
				<div class="dataPair"><label>Wall Strength</label><input type="number"@bind=@Fortress.WallStrength></div>
			</div>
			<hr />
			<h4>Code Gates</h4>
			<ul>
			@foreach(var codeGate in Fortress.FortressCodeGates)
			{
					<li><div class="dataPair"><label>Wall Strength</label><input type="number" @bind=codeGate.WallStrength></div></li>
			}
			</ul>
			<hr />
			<h4>Programs</h4> 
			<hr />
			<div class="progList">
			@foreach(var program in Fortress.FortressPrograms)
			{
				<div class="dataPair"><div>@program.id</div><div>
						<select @bind=program.ProgramID>
							@for (var i = 0; i < ProgramList.Count; i++)
							{
								<option value="@ProgramList[i].id">@ProgramList[i].name</option>
							}
						</select>
						</div>
					</div>
			}
			</div>
			<h4>Remotes</h4>
			<hr />
			<ul>
				@foreach (var program in Fortress.FortressRemotes)
				{
					<li>@program.NetObjType.Name</li>
				}
			</ul>
			<h4>Skills</h4>
			<hr />
			<ul>
				@foreach (var program in Fortress.FortressSkills)
				{
					<li>@program.Skill.Name ( @program.Ranks )</li>
				}
			</ul>
		</div>
		<div style="padding: 20px;border: solid 1px;border-radius: 10px;">
			<div id="gridHolder">
	
	
			<svg class="GridSVG" height="@(grid.height*gridSize)" width="@(grid.width*gridSize)" viewBox="0 0 @(grid.width * gridSize) @(grid.height * gridSize)">
				<g transform="translate(0, 0)">
					@for (var i=0; i< NetOBJTypes.Count; i++)
					{
							var j = i;
							<g x="1" y="1" transform="translate(@(i*gridSize),0)" @onclick=@(()=> SetSelectedItem(NetOBJTypes[j]))>
							@((MarkupString)NetOBJTypes[i].SVG)
						</g>
					}
				</g>
				@for (var i = 0; i < grid.height; i++)
				{
					<g transform="translate(0,@((i+1)*gridSize))">
						@for (var j = 0; j < grid.width; j++)
						{
							<Tile GridLookup="GridLookup" gridSize="gridSize" x="j" y="i" ContainedItems=netItemLookup[i][j] SelectedItem=SelectedItem Grid=this></Tile>
						}
					</g>
				}
	
			</svg>
	
			</div>
		</div>
		<button @onclick=Save>Save</button>
	</div>
}
@*for (var i = 0; i < height; i++)
            {
                var row = document.createElementNS('http://www.w3.org/2000/svg', "g");
                row.setAttribute("transform", `translate(0,${(i+1) * gridSize})`);
                subgridLookup[i] = {};
                for (var j = 0; j < width; j++)
                {
                    var tileGroup = document.createElementNS('http://www.w3.org/2000/svg', "g");
                    tileGroup.setAttribute("transform", `translate(${j * gridSize},0)`);
                    var tile = document.createElementNS('http://www.w3.org/2000/svg', "rect");
                    tile.setAttribute("width", gridSize);
                    tile.setAttribute("height", gridSize);
                    tile.setAttribute("xPos", j);
					tile.setAttribute("yPos", i);
					tile.classList.add("gridTile");
					tile.addEventListener("click", function (e) { handleTileClick(this, e) });
                    tileGroup.appendChild(tile);
					subgridLookup[i][j] = { "gElem": tileGroup, "ContainedElement": null }
                    row.appendChild(tileGroup);
                }
				layoutSVG.appendChild(row);
            }*@

@*var height = subgrid.height;
            var width = subgrid.width;

            var gridHolder = document.getElementById("gridHolder");
			var layoutSVG = document.createElementNS('http://www.w3.org/2000/svg', "svg");
			layoutSVG.classList.add("GridSVG");
			layoutSVG.setAttribute("height", height*gridSize);
			layoutSVG.setAttribute("width", width * gridSize);
			layoutSVG.setAttribute("viewBox", `0 0 ${width * gridSize} ${height * gridSize}`);
			var _row = document.createElementNS('http://www.w3.org/2000/svg', "g");
			_row.setAttribute("transform", `translate(0, 0)`);
			for (var i = 0; i < NetOBJTypes.length; i++)
			{
				var netOBJ = NetOBJTypes[i];
				NetOBJTypesLookup[netOBJ.id] = netOBJ;
				var tileGroup = document.createElementNS('http://www.w3.org/2000/svg', "g");
				tileGroup.setAttribute("transform", `translate(${i * gridSize},0)`);
				tileGroup.innerHTML = netOBJ.SVG;
				var svg = tileGroup.children[0];
				svg.setAttribute("x", 1);
				svg.setAttribute("y", 1);
				svg.setAttribute("height", "17px");
				svg.setAttribute("width", "17px");
				var hoverRect = document.createElementNS('http://www.w3.org/2000/svg', "rect");
				hoverRect.setAttribute("width", "20px");
				hoverRect.setAttribute("height", "20px");
				hoverRect.addEventListener("click", function (event) {
					[...layoutSVG.querySelectorAll(".selected")].forEach(x => x.classList.remove("selected"))
					this.classList.add("selected");
					activeNetOBJType = NetOBJTypesLookup[this.getAttribute("NetOBJID")];
				});
				hoverRect.setAttribute("NetOBJID", netOBJ.id);
				tileGroup.appendChild(hoverRect);
				_row.appendChild(tileGroup);
			}
			layoutSVG.appendChild(_row);
            for (var i = 0; i < height; i++)
            {
                var row = document.createElementNS('http://www.w3.org/2000/svg', "g");
                row.setAttribute("transform", `translate(0,${(i+1) * gridSize})`);
                subgridLookup[i] = {};
                for (var j = 0; j < width; j++)
                {
                    var tileGroup = document.createElementNS('http://www.w3.org/2000/svg', "g");
                    tileGroup.setAttribute("transform", `translate(${j * gridSize},0)`);
                    var tile = document.createElementNS('http://www.w3.org/2000/svg', "rect");
                    tile.setAttribute("width", gridSize);
                    tile.setAttribute("height", gridSize);
                    tile.setAttribute("xPos", j);
					tile.setAttribute("yPos", i);
					tile.classList.add("gridTile");
					tile.addEventListener("click", function (e) { handleTileClick(this, e) });
                    tileGroup.appendChild(tile);
					subgridLookup[i][j] = { "gElem": tileGroup, "ContainedElement": null }
                    row.appendChild(tileGroup);
                }
				layoutSVG.appendChild(row);
            }
			for (var fort of subgrid.Fortress)
            {

                for (var wall of fort.FortressWalls)
                {
                    addFortElem(wall);
                }
				for (var CPU of fort.FortressCPU) {
                    addFortElem(CPU);
                }
				for (var Mem of fort.FortressMemory) {
                    addFortElem(Mem);
				}
                for (var gate of fort.FortressCodeGates)
                {
					addFortElem(gate)
				}
				for (var prog of fort.FortressPrograms)
				{
					addFortElem(prog);
				}
            }
            gridHolder.appendChild(layoutSVG);*@
