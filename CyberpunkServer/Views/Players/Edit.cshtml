@model CyberpunkServer.Models.DTO.PlayerData

@{
	ViewBag.Title = "Edit Player Info";
	Layout = "~/Views/Shared/_Layout_new.cshtml";
}
@section PageStyle
{

	<style>

		.PlayerStats, .PlayerSkill, .playerInfo, .SkillType {
			display: grid;
			grid-gap: 5px 25px;
		}

		.PlayerStats {
			grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
		}

		.PlayerSkill {
			/* grid-template-columns: 1fr 1fr 1fr; */
		}

		.playerInfo {
			grid-template-columns: 1fr 1fr 1fr;
		}

		.stat-block {
			display: grid;
			grid-template-columns: minmax(0, 1fr) 10% 10%;
		}

		.playerInfo .stat-block {
			grid-template-columns: 20% 1fr;
		}

		.PlayerStats .stat-block {
			grid-template-columns: minmax(0px, 1fr) minmax(0px, 1fr);
		}

		.PlayerSkill .stat-block {
			background: linear-gradient(90deg, Green,transparent calc( (((  ( var(--currentIP) /((var(--ranks)+1)*(10 * var(--multiplier))))) * 100) * 1% )), transparent);
		}

		.SkillType {
			grid-template-columns: 1fr 1fr minmax(0px,1fr);
		}

		.SkillHeader {
			grid-column: span 3;
			text-align: center;
			background: var(--primary);
			cursor: pointer;
		}

		.SkillType.collapsed .chevron::before {
			content: "\f054";
		}

		.SkillType.expanded .chevron::before {
			content: "\f078";
		}

		.SkillType.collapsed .stat-block {
			display: none;
		}
		.CyberdeckBlock {
			min-height: 150px;
			border: solid 1px white;
			width: 100%;
			border-radius: 15px;
			margin-bottom: 10px;
		}

		.CyberdeckBlock input[type="text"] {
			width: calc(100% - 24px);
			background-color: var(--secondary);
			color: var(--primary);
			text-align: center;
			margin: 12px;
			border-style: none;
		}

		.ProgramDiv {
			border: solid 1px var(--dark);
		}

		.ComputerBlock {
			min-height: 150px;
			border: solid 1px white;
		}

		.ProgramBlock button {
			margin-left: 5px;
			border-radius: 10px;
			background-color: var(--primary);
		}

		.ProgramBlock {
			display: grid;
			grid-template-columns: minmax(0px,1fr) 1fr 1fr 1fr;
		}

		.ProgramSection {
			min-height: 150px;
			border: solid 1px white;
		}


		@@media screen and (max-width: 1200px) {
			.SkillHeader {
				grid-column: unset;
			}

			.PlayerStats {
				grid-template-columns: 1fr 1fr;
			}

			.playerInfo {
				grid-template-columns: 1fr;
			}

			.stat-block {
				grid-template-columns: minmax(0px,1fr) 10% 10%;
			}

			.playerInfo .stat-block {
				grid-template-columns: 20% 1fr;
			}

			.PlayerStats .stat-block {
				grid-template-columns: minmax(0px, 1fr) minmax(0px, 1fr);
			}

			.SkillType {
				grid-template-columns: minmax(0px,1fr);
			}
		}
	</style>
}

@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()
	<hr />
	@Html.ValidationSummary(true, "", new { @class = "text-danger" })
	@Html.HiddenFor(model => model.id)
	<div class="Player">
		<div class="playerInfo">
			<div class="stat-block"><label>Handle:</label><input type="text" name="Handle" value="@Model.Handle"></div>
			<div class="stat-block"><label>S.I.N.:</label><input type="text" name="SIN" value="@Model.SIN"></div>
			<div class="stat-block"><label>Role:</label>@Html.DropDownList("RoleID", null, htmlAttributes: new { @class = "" })</div>
		</div>
		<div class="PlayerStats">
			@for (var i = 0; i < Model.PlayerStat.Count(); i++)
			{
				<div class="stat-block">
					<input type="hidden" value="@Model.PlayerStat.ElementAt(i).Bonus" name="PlayerStat[@i].Bonus" />
					<input type="hidden" value="@Model.PlayerStat.ElementAt(i).Current" name="PlayerStat[@i].Current" />
					<input type="hidden" value="@Model.PlayerStat.ElementAt(i).id" name="PlayerStat[@i].id" />
					<input type="hidden" value="@Model.PlayerStat.ElementAt(i).PlayerID" name="PlayerStat[@i].PlayerID" />
					<input type="hidden" value="@Model.PlayerStat.ElementAt(i).StatID" name="PlayerStat[@i].StatID" />
					<label>@Model.PlayerStat.ElementAt(i).Stat.ABBR</label>
					<input type="number" value="@Model.PlayerStat.ElementAt(i).Base" name="PlayerStat[@i].Base" onchange="changeStatBase(this)" />
				</div>
			}
		</div>
		<div class="PlayerStats">
			<div class="stat-block"><label>IP:</label><input type="number" name="IP" value="@Model.IP"></div>
			<div class="stat-block"><label>Damage:</label><input type="number" name="Dammage" value="@Model.Dammage"></div>
			<div class="stat-block"><label>REP:</label><input type="number" name="REP" value="@Model.REP"></div>
			<div class="stat-block"><label>HL:</label><input type="number" name="Humanity" value="@Model.Humanity"></div>
			<div class="stat-block calculated" title="Humanity=(Empathy(base)*10)-floor(HL/10)"><label>Humanity:</label><input disabled="disabled" type="number" value="@((Model.StatLookup["EMP"].Base*10) - (Math.Floor((Model.Humanity/10.0))*10) )"></div>
			<div class="stat-block calculated" title="RUN=(BT)*3"><label>RUN:</label><input disabled="disabled" type="number" value="@(Model.StatLookup["BT"].Base * 3)"></div>
			<div class="stat-block calculated" title="LEAP=(BT)*3/4"><label>LEAP:</label><input disabled="disabled" type="number" value="@((Model.StatLookup["BT"].Base * 3) / 4)"></div>
			<div class="stat-block calculated" title="LIFT=(BT)*10"><label>LIFT:</label><input disabled="disabled" type="number" value="@((Model.StatLookup["BT"].Base * 10))"></div>
		</div>
		@{
			var j = 0;
		}
		<hr />
		<div class="pagesTab">
			<div class="tab active" data-tabname="Skills">Skills</div>
			<div class="tab" data-tabname="Cybernetics">Cybernetics</div>
			<div class="tab" data-tabname="Weapons">Weapons</div>
			<div class="tab" data-tabname="Gear">Gear</div>
		</div>
		<div class="skillsPage page active" id="SkillsTab">
			@foreach (var stat in Model.PlayerSkill.GroupBy(x => x.Skill.SkillType))
			{
				<div class="PlayerSkill">
					<div class="SkillType expanded">
						<h2 class="SkillHeader" onclick="toggleCollapse(this.parentElement.parentElement)">@stat.First().Skill.SkillTypes.Name<span class="fa chevron"></span></h2>
						@foreach (var elem in stat)
						{
							<div class="stat-block" style="--ranks:@elem.Ranks; --currentIP:@elem.CurrentIP; --multiplier:@elem.Skill.Multiplier">
								<input type="hidden" value="@elem.id" name="PlayerSkill[@j].id" />
								<input type="hidden" value="@elem.SkillID" name="PlayerSkill[@j].SkillID" />
								<input type="hidden" value="@elem.Bonus" name="PlayerSkill[@j].Bonus" />
								<input type="hidden" value="@elem.PlayerID" name="PlayerSkill[@j].PlayerID" />
								<label>@elem.Skill.Name</label>
								<input type="Number" value="@elem.CurrentIP" name="PlayerSkill[@j].CurrentIP" title="Current IP" onchange="CurrentIPChange(this)" />
								<input type="number" value="@elem.Ranks" name="PlayerSkill[@j].Ranks" title="Ranks" onchange="CurrentRankChange(this)" />
							</div>
							j++;
						}
					</div>
				</div>
			}
		</div>
		<div class="CyberneticsPage page" id="CyberneticsTab" data-tabname="Cybernetics">
		</div>
		<div class="WeaponsPage page" id="WeaponsTab" data-tabname="Weapons">
		</div>
		<div class="GearPage page" id="GearTab" data-tabname="Gear">
			<div class="PlayerSkill">
				<div class="SkillType expanded">
					<h2 class="SkillHeader" onclick="toggleCollapse(this.parentElement.parentElement)">Cyberdecks<span class="fa chevron"></span></h2>
					@{
						j = 0;
					}
				<div class="CyberdeckSection">
					@foreach (var elem in Model.PlayerCyberdeck)
					{

						<div class="CyberdeckBlock">
							<input type="hidden" value="@elem.id" name="PlayerCyberdeck[@j].id" />
							<input type="text" name="PlayerCyberdeck[@j].name" value="@elem.name">
							@{
								var k = 0;
							}
						<div class="ProgramSection">
							<div class="ProgramBlock">
								<div><label>Name</label></div><div><label>Str</label></div><div><label>MU</label></div><div></div>
							</div>
							@foreach (var prog in elem.PlayerCyberdeckPrograms)
							{
								<div class="ProgramBlock">
									<input type="hidden" value="@prog.id" name="PlayerCyberdeck[@j].PlayerCyberdeckPrograms[@k].id" />
									<div><label>@prog.Program.name</label></div><div><input type="number" name="PlayerCyberdeck[@j].PlayerCyberdeckPrograms[@k].Strength" value="@prog.Program.Strength" /></div><div><label>@prog.Program.MU</label></div><div><button>Uninstall</button></div>
								</div>
								j++;
							}
						</div>
						</div>
						j++;
					}
				</div>
				<div class="ProgramSection">
					@{
						j = 0;
					}
					<div class="ProgramBlock">
						<div><label>Name</label></div><div><label>Str</label></div><div><label>MU</label></div><div></div>
					</div>
					@foreach (var elem in Model.PlayerPrograms)
					{
						<div class="ProgramBlock">
							<input type="hidden" value="@elem.id" name="PlayerPrograms[@j].id" />
							<input type="hidden" value="@elem.ProgramID" name="PlayerPrograms[@j].ProgramID" />
							<div><label>@elem.Program.name</label></div><div><label>@elem.Program.Strength</label></div><div><label>@elem.Program.MU</label></div><div><button>Install</button></div>
						</div>
						j++;
					}
				</div>
				<div class="computerSection">
					@{
						j = 0;
					}
					@foreach (var elem in Model.PlayerComputer)
					{
						<div class="ComputerBlock">
							<input type="hidden" value="@elem.id" name="PlayerComputer[@j].id" />
							<input type="hidden" value="@elem.ComputerID" name="PlayerComputer[@j].ProgramID" />
							<label>@elem.name</label>
							@{
								var k = 0;
							}
						<div class="ProgramSection">
							<div class="ProgramBlock">
								<div><label>Name</label></div><div><label>Str</label></div><div><label>MU</label></div><div></div>
							</div>
							@foreach (var prog in elem.PlayerComputerPrograms)
							{
								<div class="ProgramBlock">
									<input type="hidden" value="@prog.id" name="PlayerComputer[@j].PlayerComputerPrograms[@k].id" />
									<label>@prog.Program.name<button>Uninstall</button></label>
								</div>
								j++;
							}
						</div>
						</div>
						j++;
					}
				</div>
				</div>
			</div>
			
		</div>
		<input type="submit" value="Save" class="btn btn-default" />
	</div>
}

<div>
	@Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
	<script>
		var PlayerOBJ =@Html.Raw(@ViewBag.JSON);
		function toggleCollapse(elem)
		{
			elem.querySelectorAll(".SkillType").forEach(x => {
				x.classList.toggle("expanded");
				x.classList.toggle("collapsed");
			});
		}
		function CurrentIPChange(elem)
		{
			var statBlock = elem.parentElement
			var newIP = elem.value;
			statBlock.style.setProperty('--currentIP', newIP);
		}
		function CurrentRankChange(elem)
		{
			var statBlock = elem.parentElement
			var newIP = elem.value;
			statBlock.style.setProperty('--ranks', newIP);
		}
		function changeStatBase(elem) {
			var statBlock = elem.parentElement
			var newIP = elem.value;

		}

	</script>
}
