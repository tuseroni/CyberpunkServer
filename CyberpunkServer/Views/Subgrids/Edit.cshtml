@model CyberpunkServer.Models.DTO.SubgridData

@{
	ViewBag.Title = "Edit";
	Layout = "~/Views/Shared/_Layout_new.cshtml";
}
<style>
	rect.gridTile {
		fill: transparent;
		border-style: solid;
		border-width: 1px;
		stroke: black;
	}

		rect.gridTile:hover {
			fill: #add8e6a1;
		}

	div#gridHolder {
		/* height: 60vh; */
		background-color: white;
		width: 100%;
	}

	div#Elements {
		display: grid;
		grid-template-columns: repeat(19, 1fr);
	}

	#Elements svg {
		height: 100%;
		width: 100%;
	}

	.GridSVG {
		height: 100%;
		width: 100%;
	}

	.NetOBJ + rect {
		fill: transparent;
	}

		.NetOBJ + rect.selected, .NetOBJ + rect:hover {
			stroke: black;
			rx: 5;
		}

		.NetOBJ + rect.selected {
			fill: #d3d3d3a1;
		}

		.NetOBJ + rect:hover {
			fill: #add8e6a1;
		}


	.NetOBJ {
		margin: 2px;
		display: block;
	}
</style>

<form method="post" onsubmit="submitForm(this)">
	@Html.AntiForgeryToken()

	<div class="form-horizontal">
		<hr />
		@Html.ValidationSummary(true, "", new { @class = "text-danger" })
		@Html.HiddenFor(model => model.id)
		<button type="button" onclick="testJackIn(3)">Test Jack In</button>
		<div style="display: grid; grid-template-columns: 30% 1fr; grid-gap: 10px;">
			<div style="border: solid 1px;border-radius: 10px;"></div>
			<div style="padding: 20px;border: solid 1px;border-radius: 10px;">
				<div id="gridHolder"></div>
			</div>
		</div>
		<div class="form-group">
			<div class="col-md-offset-2 col-md-10">
				<input type="submit" value="Save" class="btn btn-default" />
			</div>
		</div>
	</div>
</form>


<div>
	@Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
	
	<script src="~/Scripts/jquery.signalR-2.4.3.js"></script>
	<script src="~/SignalR/hubs"></script>
	<script>
		class NetOBJ
		{
			id;
			xPos=0;
			yPos=0;
			FortressID=0;
			Type=0;
			NetObjType=null;
			constructor()
			{
			}
		}
		class NetOBJType
		{
			id;
			Name;
			Title;
			SVG;
			constructor()
			{
			}
		}

	</script>
	<script>

		var subgridData =@Html.Raw(@ViewBag.subgrid);
		var NetOBJTypes= @Html.Raw(ViewBag.NetOBJTypes);
		var ActiveFortress = subgridData.Fortress[0];
		var awaitingPlayerAdd = false;
		var awaitingPlayer = null;
		var connection = $.hubConnection();
		connection.logging = true;
		connection.url = "/com";
		var contosoChatHubProxy = connection.createHubProxy('ComHub');
		contosoChatHubProxy.on('PlayerMove', function (PlayerID, x, y) {
			var gridtileData = subgridLookup[y][x];
			var svgElem = Netrunners[PlayerID].SVGElem;
			svgElem.parentElement.removeChild(svgElem);
			gridtileData.gElem.appendChild(svgElem);

			console.log(x, y);
		});
		contosoChatHubProxy.on('JackInRequestReceived', function (playerData)
		{
			if (confirm(`${playerData.Handle} is Trying to Jack In, Please Click Jack In Point`)) {
				awaitingPlayerAdd = true;
				awaitingPlayer = playerData;
				console.log(playerData.Handle);
			}
			else {
				alert("Jack in Canceled");
				contosoChatHubProxy.invoke('RejectJackInRequest', playerData)
			}
			
		});
		contosoChatHubProxy.on('JackInRequestAccepted', function (playerData , subgriddata)
		{
			console.log("Accepted request");

		});
		connection.reconnecting(function () {
			console.log("reconnecting");
		});
		connection.start()
			.done(function () {
				console.log('Now connected, connection ID=' + connection.id);

			})
			.fail(function () { console.log('Could not connect'); });


		//$(function () {
		//	var hub = $.connection.ComHub;
		//	$.connection.hub
		//		.start()
		//		.done(function () {
		//			//hub.server.say('Hello SignalR!');
		//		});
		//	hub.PlayerMove = function (PlayerID, x, y) {
		//		console.log(x, y);
		//	};
		//	hub.JackInRequestReceived = function (playerData) {
		//		console.log(playerData.Handle);
		//	}
		//});


		// connect


        var subgridLookup = {};
		var gridSize = 20;//px
		var Netrunners = {};
		NetOBJTypesLookup = {};
		var activeNetOBJType = null;
		function testJackIn(id)
		{
			contosoChatHubProxy.invoke('JackInRequest',id).done(function ()
			{
				console.log('Invocation of JackInRequest succeeded');
			}).fail(function (error)
			{
				console.log('Invocation of AcceptJackInRequest failed. Error: ' + error);
			});
		}
		function addPlayerToGrid(playerData,x,y)
		{
			playerData.xPos = x;
			playerData.yPos = y;
			subgridData.JackedInPlayers.push(playerData);
			contosoChatHubProxy.invoke('AcceptJackInRequest', playerData, subgridData).done(function () {
				console.log('Invocation of AcceptJackInRequest succeeded');
				playerData.Type = 6;
				playerData.NetObjType = NetOBJTypesLookup[6];
				Netrunners[playerData.id] = { "PlayerData": playerData, "SVGElem": null };
				var gridtileData = subgridLookup[y][x];
				Netrunners[playerData.id].SVGElem=placeElem(playerData, gridtileData);


			}).fail(function (error) {
				console.log('Invocation of AcceptJackInRequest failed. Error: ' + error);
			});
		}
		function handleTileClick(tile, e)
		{
			var xPos = tile.getAttribute("xPos");
			var yPos = tile.getAttribute("yPos");
			if (awaitingPlayerAdd) {
				addPlayerToGrid(awaitingPlayer, xPos, yPos);
				awaitingPlayer = null;
				awaitingPlayerAdd = false;
			}
			else if (activeNetOBJType !=null)
			{
				var elem = {
					"NetObjType": {
						"SVG": activeNetOBJType.SVG
					}
				};
				var tileData = subgridLookup[yPos][xPos];
				var gElem = placeElem(elem, tileData);
				var newNetOBJ = new NetOBJ();
				newNetOBJ.NetObjType=Object.assign(new NetOBJType(), activeNetOBJType);
				newNetOBJ.FortressID = subgridData.Fortress[0].id;
				newNetOBJ.Type = activeNetOBJType.id;
				newNetOBJ.xPos = xPos;
				newNetOBJ.yPos = yPos;
				switch (activeNetOBJType.id)
				{
					case 1:
						subgridData.Fortress[0].FortressWalls.push(newNetOBJ);
						break;
					case 2:
						subgridData.Fortress[0].FortressCPU.push(newNetOBJ);
						break;
					case 3:
						subgridData.Fortress[0].FortressMemory.push(newNetOBJ);
						break;
					case 4:
						subgridData.Fortress[0].FortressCodeGates.push(newNetOBJ);
						break;
					case 5:
						//subgridData.Fortress[0].FortressProgram.push(newNetOBJ);
						break;
					case 6:
						//subgridData.Fortress[0].FortressRemotes.push(newNetOBJ);
						break;
					case 7:
					case 8:
					case 9:
					case 10:
					case 11:
					case 12:
					case 13:
					case 14:
					case 15:
					case 16:
					case 17:
					case 18:
					case 19:
						subgridData.Fortress[0].FortressRemotes.push(newNetOBJ);
						break;


				}

			}
		}
		
        function buildGrid(subgrid)
        {
            var height = subgrid.height;
            var width = subgrid.width;

            var gridHolder = document.getElementById("gridHolder");
			var layoutSVG = document.createElementNS('http://www.w3.org/2000/svg', "svg");
			layoutSVG.classList.add("GridSVG");
			layoutSVG.setAttribute("height", height*gridSize);
			layoutSVG.setAttribute("width", width * gridSize);
			layoutSVG.setAttribute("viewBox", `0 0 ${width * gridSize} ${height * gridSize}`);
			var _row = document.createElementNS('http://www.w3.org/2000/svg', "g");
			_row.setAttribute("transform", `translate(0, 0)`);
			for (var i = 0; i < NetOBJTypes.length; i++)
			{
				var netOBJ = NetOBJTypes[i];
				NetOBJTypesLookup[netOBJ.id] = netOBJ;
				var tileGroup = document.createElementNS('http://www.w3.org/2000/svg', "g");
				tileGroup.setAttribute("transform", `translate(${i * gridSize},0)`);
				tileGroup.innerHTML = netOBJ.SVG;
				var svg = tileGroup.children[0];
				svg.setAttribute("x", 1);
				svg.setAttribute("y", 1);
				svg.setAttribute("height", "17px");
				svg.setAttribute("width", "17px");
				var hoverRect = document.createElementNS('http://www.w3.org/2000/svg', "rect");
				hoverRect.setAttribute("width", "20px");
				hoverRect.setAttribute("height", "20px");
				hoverRect.addEventListener("click", function (event) {
					[...layoutSVG.querySelectorAll(".selected")].forEach(x => x.classList.remove("selected"))
					this.classList.add("selected");
					activeNetOBJType = NetOBJTypesLookup[this.getAttribute("NetOBJID")];
				});
				hoverRect.setAttribute("NetOBJID", netOBJ.id);
				tileGroup.appendChild(hoverRect);
				_row.appendChild(tileGroup);
			}
			layoutSVG.appendChild(_row);
            for (var i = 0; i < height; i++)
            {
                var row = document.createElementNS('http://www.w3.org/2000/svg', "g");
                row.setAttribute("transform", `translate(0,${(i+1) * gridSize})`);
                subgridLookup[i] = {};
                for (var j = 0; j < width; j++)
                {
                    var tileGroup = document.createElementNS('http://www.w3.org/2000/svg', "g");
                    tileGroup.setAttribute("transform", `translate(${j * gridSize},0)`);
                    var tile = document.createElementNS('http://www.w3.org/2000/svg', "rect");
                    tile.setAttribute("width", gridSize);
                    tile.setAttribute("height", gridSize);
                    tile.setAttribute("xPos", j);
					tile.setAttribute("yPos", i);
					tile.classList.add("gridTile");
					tile.addEventListener("click", function (e) { handleTileClick(this, e) });
                    tileGroup.appendChild(tile);
					subgridLookup[i][j] = { "gElem": tileGroup, "ContainedElement": null }
                    row.appendChild(tileGroup);
                }
				layoutSVG.appendChild(row);
            }
			for (var fort of subgrid.Fortress)
            {

                for (var wall of fort.FortressWalls)
                {
                    addFortElem(wall);
                }
				for (var CPU of fort.FortressCPU) {
                    addFortElem(CPU);
                }
				for (var Mem of fort.FortressMemory) {
                    addFortElem(Mem);
				}
                for (var gate of fort.FortressCodeGates)
                {
					addFortElem(gate)
                }
            }
            gridHolder.appendChild(layoutSVG);
        }
		function placeElem(elem, gridtileData)
        {
            
			if (gridtileData.ContainedElement != null)
            {
                return;
            }
			var gridTile = gridtileData.gElem;
			var codeGateSvg = elem.NetObjType.SVG; //svgElems[elem.Type];
			gridTile.innerHTML = codeGateSvg + gridTile.innerHTML;
			codeGateSvg = gridTile.children[0];
			codeGateSvg.dataset["elemdata"] = JSON.stringify(elem);
			gridtileData.ContainedElement = codeGateSvg;
			return codeGateSvg;
        }
        function addFortElem(elem)
		{
			var test = Object.assign(new NetOBJ(), elem);
			var gridtileData = subgridLookup[elem.yPos][elem.xPos];
			var gridTile = gridtileData.gElem;
			var codeGateSvg = elem.NetObjType.SVG; //svgElems[elem.Type];
            gridTile.innerHTML = codeGateSvg + gridTile.innerHTML;
            codeGateSvg = gridTile.children[0];
            codeGateSvg.dataset["elemdata"] = JSON.stringify(elem);
			gridtileData.ContainedElement = codeGateSvg;
			return codeGateSvg;
		}
		function submitForm(theForm)
		{
			return false;
		}
		buildGrid(subgridData)
	</script>
}
